CREATE PROCEDURE spDisplayWelcome
AS
BEGIN
  PRINT 'WELCOME TO PROCEDURE in SQL Server'
END

--=========================================================
EXECUTE spDisplayWelcome
Or
EXEC spDisplayWelcome
Or
spDisplayWelcome
--===================================================================


-- Create Employee Table
CREATE TABLE Employee
(
  ID INT PRIMARY KEY,
  Name VARCHAR(50),
  Gender VARCHAR(50),
  DOB DATETIME,
  DeptID INT
)
GO

-- Populate the Employee Table with test data
INSERT INTO Employee VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 1)
INSERT INTO Employee VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 2)
INSERT INTO Employee VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 2)
INSERT INTO Employee VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 3)
INSERT INTO Employee VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 1)
INSERT INTO Employee VALUES(6, 'Hina', 'Female','1995-07-12 10:53:27.060', 2)
GO
--================================================================================================
CREATE PROCEDURE spGetEmployee
AS
BEGIN
  Select Name, Gender, DOB from Employee
END

-- To Execute the Procedure
EXEC spGetEmployee

--==================================================================================

sp_helptext spGetEmployee
--==============================================================================================

CREATE PROCEDURE spGetEmployee
As
BEGIN
  SELECT Name,Gender, DOB FROM Employee
END

-- How to change the body of a stored procedure
-- User Alter procedure to change the body
ALTER PROCEDURE spGetEmployee
AS
BEGIN
  SELECT Name, Gender, DOB 
  FROM Employee 
  ORDER BY Name
END

--==========================================================================================
-- To change the procedure name from spGetEmployee to spGetEmployee1
-- Use sp_rename system defined stored procedure
EXEC sp_rename 'spGetEmployee', 'spGetEmployee1'

--===========================================================================================
Drop proc spGetEmployee1 or Drop Procedure spGetEmployee1

--==================================================================================

-- Create a Procedure
ALTER PROCEDURE spAddTwoNumbers(@no1 INT, @no2 INT)
AS
BEGIN
  DECLARE @Result INT
  SET @Result = @no1 + @no2
  PRINT 'RESULT IS: '+ CAST(@Result AS VARCHAR)
END
GO

-- Calling the procedure:
EXECUTE spAddTwoNumbers 10, 20

-- OR 
EXECUTE spAddTwoNumbers @no1=10, @no2=20

-- OR calling the procedure by declaring two variables as shown below
DECLARE @no1 INT, @no2 INt
SET @no1 = 10
SET @no2 = 20
EXECUTE spAddTwoNumbers @no1, @no2

--==========================================================================================
CREATE PROCEDURE spGetEmployeesByGenderAndDepartment
  @Gender VARCHAR(20),
  @DeptID INT
AS
BEGIN
  SELECT Name, Gender, DOB, DeptID 
  FROM Employee
  WHERE Gender = @Gender AND DeptID = @DeptID
END
GO

EXECUTE spGetEmployeesByGenderAndDepartment 'Male', 1

EXEC spGetEmployeesByGenderAndDepartment @DeptID=1, @Gender='Male'

--===================================================================================

-- Create a Procedure
CREATE PROCEDURE spUpdateEmployeeByID
(
  @ID INT, 
  @Name VARCHAR(50), 
  @Gender VARCHAR(50), @DOB DATETIME, 
  @DeptID INT
)
AS
BEGIN
  UPDATE Employee SET 
      Name = @Name, 
      Gender = @Gender,
      DOB = @DOB, 
      DeptID = @DeptID
  WHERE ID = @ID
END
GO

-- Executing the Procedure
-- If you are not specifying the Parameter Names then the order is important
EXECUTE spUpdateEmployeeByID 3, 'Palak', 'Female', '1994-06-17 10:53:27.060', 3

-- If you are specifying the Parameter Names then order is not mandatory
EXECUTE spUpdateEmployeeByID @ID =3, @Gender = 'Female', @DOB = '1994-06-17 10:53:27.060', @DeptID = 3, @Name = 'Palak'

--=================================================================================================================

CREATE PROCEDURE spGetResult
  @No1 INT,
  @No2 INT,
  @Result INT OUTPUT
AS
BEGIN
  SET @Result = @No1 + @No2
END

-- To Execute Procedure
DECLARE @Result INT
EXECUTE spGetResult 10, 20, @Result OUT
PRINT @Result

--===============================================================================================

CREATE PROCEDURE spGetEmployeeCountByGender
  @Gender VARCHAR(30),
  @EmployeeCount INT OUTPUT
AS
BEGIN
  SELECT @EmployeeCount = COUNT(ID)
  FROM    Employee
  WHER     Gender = @Gender
END

DECLARE @EmployeeTotal INT
EXECUTE spGetEmployeeCountByGender 'Male', @EmployeeTotal OUTPUT
PRINT @EmployeeTotal

DECLARE @EmployeeTotal INT
EXECUTE spGetEmployeeCountByGender 'Male', @EmployeeTotal
PRINT @EmployeeTotal

DECLARE @EmployeeTotal INT
EXECUTE spGetEmployeeCountByGender'Male', @EmployeeTotal
IF (@EmployeeTotal IS NULL)
  PRINT '@EmployeeTotal IS NULL'
ELSE
  PRINT '@EmployeeTotal IS NOT NULL'


  DECLARE @EmployeeTotal INT
EXECUTE spGetEmployeeCountByGender @EmployeeTotal OUTPUT, 'Male'
PRINT @EmployeeTotal

DECLARE @EmployeeTotal INT
EXECUTE spGetEmployeeCountByGender @EmployeeCount = @EmployeeTotal OUTPUT, @Gender ='Male'
PRINT @EmployeeTotal

--=======================================================================================================================

CREATE PROCEDURE spAddNumber(@No1 INT= 100, @No2 INT)
AS
BEGIN
  DECLARE @Result INT
  SET @Result = @No1 + @No2
  PRINT 'The SUM of the 2 Numbers is: '+ CAST(@Result AS VARCHAR)
END

-- Executing the above procedure:
 EXEC spAddNumber 3200, 25
 EXEC spAddNumber @No1=200, @No2=25
 EXEC spAddNumber @No1=DEFAULT, @No2=25
 EXEC spAddNumber @No2=25

--========================================================================

--#######################  SP with Return  ############################

--CREATE PROCEDURE spGetTotalCountOfEmployee1
 -- @TotalCount INT OUTPUT
--AS
--BEGIN
 -- SELECT @TotalCount = COUNT(ID)FROM Employee
--END
 

--DECLARE @EmployeeTotal INT
--EXECUTE spGetTotalCountOfEmployee1 @EmployeeTotal OUTPUT
--PRINT @EmployeeTotal
--======================================


--CREATE PROCEDURE spGetTotalCountOfEmployee2
--AS
--BEGIN
--  RETURN (SELECT COUNT(ID) FROM Employee)
--END

---- For calling the procedure:
--DECLARE @EmployeeTotal INT
--EXECUTE @EmployeeTotal = spGetTotalCountOfEmployee2
--PRINT @EmployeeTotal


--CREATE PROCEDURE spGetEmplloyeeNameById1
--  @ID INT,
--  @Name VARCHAR(30) OUTPUT
--AS
--BEGIN
--  SELECT @Name = Name FROM Employee WHERE ID = @ID
--END
--GO

---- For calling the procedure:
--DECLARE @EmployeeName VARCHAR(30)
--EXECUTE spGetEmplloyeeNameById1 3, @EmployeeName OUTPUT
--PRINT @EmployeeName



--CREATE PROCEDURE spGetEmplloyeeNameById2
--  @ID INT
--AS
--BEGIN
--  RETURN (SELECT Name FROM Employee WHERE ID = @ID)
--END
--GO

---- For calling the procedure:
--DECLARE @EmployeeName VARCHAR(30)
--EXECUTE @EmployeeName = spGetEmplloyeeNameById2 3
--PRINT @EmployeeName


--=======================================
--############### Temparory SP ###################
--CREATE PROCEDURE #LocalProcedure
--AS
--BEGIN
--  PRINT 'This is Local Temporary Procedure'
--END

---- Calling the Local Temporary Procedure
--EXEC #LocalProcedue

----=======================================================
--CREATE PROCEDURE ##GlobalProcedue
--AS
--BEGIN
--  PRINT 'This is Global Temporary Procedure'
--END

---- Calling the Global Temporary Procedure
--EXEC ##GlobalProced

--=====================================================

--#######  Encryption #######

--Select * from syscomments
----===============================================================
--sp_depends spGetEmployee 
----=======================================

---- Stored Procedure without with encryption option
--CREATE Procedure sp_GetEmployeeDetailsById
--(
--  @ID INT
--)
--AS
--BEGIN
--  SELECT  Name, Gender, CAST(DOB AS DATE) AS DOB 
--  FROM   Employee 
--  WHERE   ID = @ID
--END
----====================================================================================
--SELECT * FROM SYSCOMMENTS WHERE ID = OBJECT_ID('sp_GetEmployeeDetailsById')

--sp_helptext sp_GetEmployeeDetailsById
----======================================================================

---- Stored Procedure with encryption option
--ALTER Procedure sp_GetEmployeeDetailsById
--(
--  @ID INT
--)
--WITH ENCRYPTION
--AS
--BEGIN
--  SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--  FROM Employee 
--  WHERE ID = @ID
--END
----================================================================================
--SELECT * FROM SYSCOMMENTS WHERE ID = OBJECT_ID('sp_GetEmployeeDetailsById')

----=====================================================================================
--ALTER Procedure sp_GetEmployeeDetailsById
--(
--  @ID INT
--)
--WITH RECOMPILE
--AS
--BEGIN
--  SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--  FROM Employee 
--  WHERE ID = @ID
--END
----=======================================================

--SELECT * FROM SYSCOMMENTS WHERE ID = OBJECT_ID('sp_GetEmployeeDetailsById

--===================================================================================================
--##################Scalar Function #################

----Scalar Valued Function
--SELECT SQUARE(3)

----=======================================
--SELECT GETDATE()
----========================================
--CREATE FUNCTION SVF1(@X INT)
--RETURNS INT
--AS
--BEGIN
--  RETURN @X * @X *@X
--END
----============================================= 

--SELECT dbo.SVF1(5)
----=================================================
--CREATE FUNCTION CalculateAge
--(
--  @DOB DATE
--)
--RETURNS INT
--AS
--BEGIN
--  DECLARE @AGE INT
--  SET @AGE = DATEDIFF(YEAR, @DOB, GETDATE())-
--  CASE
--    WHEN (MONTH(@DOB) > MONTH(GETDATE())) OR
--       (MONTH(@DOB) = MONTH(GETDATE()) AND
--        DAY(@DOB) > DAY(GETDATE()))
--    THEN 1
--    ELSE 0
--  END
--  RETURN @AGE
--END
----================================================
--SELECT dbo.CalculateAge ('02/29/1988')
--SELECT dbo.CalculateAge ('02/29/1988') AS AGE

----==========================================================
--Drop table Employee
---- Create Table Employee
--CREATE TABLE Employee
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  DOB DATETIME
--)
--GO

---- Populate Employee table with some test data
--INSERT INTO Employee(ID, Name, DOB) VALUES(1, 'Pranaya', '1988-02-29 21:29:16.667')
--INSERT INTO Employee(ID, Name, DOB) VALUES(2, 'Kumar', '1989-03-27 21:29:16.667')
--INSERT INTO Employee(ID, Name, DOB) VALUES(3, 'Rout', '1990-04-15 21:29:16.667')
----======================================================================
--SELECT ID, Name, DOB, dbo.CalculateAge(DOB) AS Age  FROM Employee

--SELECT ID, Name, DOB, dbo.calculateAge(DOB) AS Age  FROM Employee  WHERE dbo.calculateAge(DOB) > 31  
----=========================================================================
--CREATE PROCEDURE spCalcualateAge(@DOB DATE)
--AS
--BEGIN
--  DECLARE @AGE INT
--  SET @AGE =DATEDIFF(YEAR, @DOB,GETDATE())-
--    CASE
--      WHEN (MONTH(@DOB)>MONTH(GETDATE()))OR
--        (MONTH(@DOB)=MONTH(GETDATE())AND
--        DAY(@DOB)>DAY(GETDATE()))
--      THEN 1
--      ELSE 0
--    END
--  SELECT @AGE
--END

----Execute
--Execute spCalcualateAge '02/29/198
--================================================================================
--################### Inline-Table Valued Functions ####################
---- Inline Table Valued Function
---- Create Student Table
--CREATE TABLE Student
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  Gender VARCHAR(50),
--  DOB DATETIME,
--  Branch VARCHAR(50)
--)

---- Populate the Student Table with test data
--INSERT INTO Student VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 'CSE')
--INSERT INTO Student VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 'CSE')
--INSERT INTO Student VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 'ETC')
--INSERT INTO Student VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 'ETC')
--INSERT INTO Student VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 'CSE')

----===========================================
--CREATE FUNCTION FN_GetStudentDetailsByID
--(
--  @ID INT
--)
--RETURNS TABLE
--AS
--RETURN (SELECT * FROM Student WHERE ID = @ID)
----====================================================
--SELECT * FROM FN_GetStudentDetailsByID(2)
----================================================
--CREATE FUNCTION FN_GetStudentDetailsByBranch
--(
--  @Branch VARCHAR(50)
--)
--RETURNS TABLE
--AS
--RETURN (SELECT * FROM Student WHERE Branch = @Branch)
----=============================================================
--SELECT * FROM FN_GetStudentDetailsByBranch('CSE')
----==========================================================
--CREATE FUNCTION FN_GetStudentDetailsByGender
--(
--  @Gender VARCHAR(50)
--)
--RETURNS TABLE
--AS
--RETURN (SELECT Name, DOB, Branch FROM Student WHERE Gender = @Gender)
----================================================================
--SELECT * FROM FN_GetStudentDetailsByGender('Male')
----===============================================================
---- Create Department Table
--CREATE TABLE Department
--(
--  ID INT PRIMARY KEY,
--  DepartmentName VARCHAR(50)
--)
--GO

---- Populate the Department Table with test data
--INSERT INTO Department VALUES(1, 'IT')
--INSERT INTO Department VALUES(2, 'HR')
--INSERT INTO Department VALUES(3, 'Sales')
--GO

---- Create Employee Table

--Drop table Employee;
--CREATE TABLE Employee
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  Gender VARCHAR(50),
--  DOB DATETIME,
--  DeptID INT FOREIGN KEY REFERENCES Department(ID) 
--)
--GO

---- Populate the Employee Table with test data
--INSERT INTO Employee VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 1)
--INSERT INTO Employee VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 2)
--INSERT INTO Employee VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 2)
--INSERT INTO Employee VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 3)
--INSERT INTO Employee VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 1)
--INSERT INTO Employee VALUES(6, 'Hina', 'Female','1995-07-12 10:53:27.060', 2)
--GO
----=======================================================================================
--CREATE FUNCTION FN_GetEmployeessByGender
--(
--  @Gender VARCHAR(50)
--)
--RETURNS TABLE
--AS
--RETURN (SELECT ID, Name, Gender, DOB, DeptID FROM Employee WHERE Gender = @Gender)
----========================================================================================
--SELECT Name, Gender, DOB, DepartmentName FROM FN_GetEmployeessByGender('Male') Emp  JOIN Department Dept on Dept.ID = Emp.DeptID

----================================================================================================================
--CREATE FUNCTION FN_EmployeessByGender
--(
--  @Gender VARCHAR(50)
--)
--RETURNS TABLE
--AS
--RETURN (
--       SELECT Emp.ID, Name, Gender, DOB, DepartmentName 
--    FROM Employee Emp
--    JOIN Department Dept on Emp.DeptId = Dept.Id
--    WHERE Gender = @Gender)

--	--============================================================================================================
--	SELECT * FROM dbo.FN_EmployeessByGender('Female');

--=============================================================================
--#######################Multi Statement Table Valued Function################################

 ----Multi Statement Table Valued Function

---- Create Department Table
--CREATE TABLE Department
--(
--  ID INT PRIMARY KEY,
--  DepartmentName VARCHAR(50)
--)
--GO

---- Populate the Department Table with test data
--INSERT INTO Department VALUES(1, 'IT')
--INSERT INTO Department VALUES(2, 'HR')
--INSERT INTO Department VALUES(3, 'Sales')
--GO

---- Create Employee Table
--CREATE TABLE Employee
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  Gender VARCHAR(50),
--  DOB DATETIME,
--  DeptID INT FOREIGN KEY REFERENCES Department(ID) 
--)
--GO

---- Populate the Employee Table with test data
--INSERT INTO Employee VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 1)
--INSERT INTO Employee VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 2)
--INSERT INTO Employee VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 2)
--INSERT INTO Employee VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 3)
--INSERT INTO Employee VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 1)
--INSERT INTO Employee VALUES(6, 'Hina', 'Female','1995-07-12 10:53:27.060', 2)
--GO
----===================================================================================
---- Inline Table Valued function:
--CREATE FUNCTION ILTVF_GetEmployees()
--RETURNS TABLE
--AS
--RETURN (SELECT ID, Name, Cast(DOB AS Date) AS DOB
--        FROM Employee)
----=============================================================================================
--SELECT * FROM ILTVF_GetEmployees()
----========================================================================================
---- Multi-statement Table Valued function:
--CREATE FUNCTION MSTVF_GetEmployees()
--RETURNS @Table Table (ID int, Name nvarchar(20), DOB Date)
--AS
--BEGIN
--  INSERT INTO @Table
--    SELECT ID, Name, Cast(DOB AS Date)
--    FROM Employee
--  Return
--End
----===============================================================================
--SELECT * FROM dbo.ILTVF_GetEmployees()

--UPDATE ILTVF_GetEmployees() SET Name='Pranaya1' WHERE ID= 1

----=============================================================================
--######################## Encrypt Schema ############################
----Encryption and Schema Binding Option
---- Create Employee Table
--CREATE TABLE Employee
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  Gender VARCHAR(50),
--  DOB DATETIME,
--  DeptID INT
--)
--GO

---- Populate the Employee Table with test data
--INSERT INTO Employee VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 1)
--INSERT INTO Employee VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 2)
--INSERT INTO Employee VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 2)
--INSERT INTO Employee VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 3)
--INSERT INTO Employee VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 1)
--INSERT INTO Employee VALUES(6, 'Hina', 'Female','1995-07-12 10:53:27.060', 2)
--GO
----==================================================================================
---- Function without with encryption option
--CREATE FUNCTION fn_GetEmployeeDetailsById
--(
--  @ID INT
--)
--RETURNS TABLE
--AS
--RETURN (SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--    FROM Employee 
--    WHERE ID = @ID)
----=========================================================================================
--sp_helptext fn_GetEmployeeDetailsById
----==========================================================================================
---- Function with encryption option
--ALTER FUNCTION fn_GetEmployeeDetailsById
--(
--  @ID INT
--)
--RETURNS TABLE
--WITH Encryption
--AS
--RETURN (SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--    FROM Employee 
--    WHERE ID = @ID)
----===========================================================================================
--sp_helptext fn_GetEmployeeDetailsById
----=============================================================================================
---- Function without SCHEMABINDING option
--CREATE FUNCTION fn_GetEmployeesByGender
--(
--  @Gender INT
--)
--RETURNS TABLE
--AS
--RETURN (SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--    FROM Employee 
--    WHERE Gender = @Gender)
----==============================================================================================
--DROP TABLE Employee
--SELECT * FROM dbo.fn_GetEmployeesByGender('Male')
----==============================================================================================
---- Function with SCHEMABINDING option
--ALTER FUNCTION fn_GetEmployeesByGender
--(
--  @Gender INT
--)
--RETURNS TABLE
--WITH SCHEMABINDING
--AS
--RETURN (SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--    FROM dbo.Employee 
--    WHERE Gender = @Gender)
----===========================================================================================================
--DROP TABLE Employee
----==========================================================================================================
--CREATE FUNCTION fn_GetEmployeesByGender
--(
--  @Gender INT
--)
--RETURNS TABLE
--WITH SCHEMABINDING, ENCRYPTION
--AS
--RETURN (SELECT Name, Gender, CAST(DOB AS DATE) AS DOB 
--    FROM dbo.Employee 
--    WHERE Gender = @Gende
--====================================================================================================
--#################################Deterministic and Non-Deterministic Functions ########################
----Deterministic and Non-Deterministic Functions 
---- Create Employee Table
--CREATE TABLE Employee
--(
--  ID INT PRIMARY KEY,
--  Name VARCHAR(50),
--  Gender VARCHAR(50),
--  DOB DATETIME,
--  DeptID INT
--)
--GO

---- Populate the Employee Table with test data
--INSERT INTO Employee VALUES(1, 'Pranaya', 'Male','1996-02-29 10:53:27.060', 1)
--INSERT INTO Employee VALUES(2, 'Priyanka', 'Female','1995-05-25 10:53:27.060', 2)
--INSERT INTO Employee VALUES(3, 'Anurag', 'Male','1995-04-19 10:53:27.060', 2)
--INSERT INTO Employee VALUES(4, 'Preety', 'Female','1996-03-17 10:53:27.060', 3)
--INSERT INTO Employee VALUES(5, 'Sambit', 'Male','1997-01-15 10:53:27.060', 1)
--INSERT INTO Employee VALUES(6, 'Hina', 'Female','1995-07-12 10:53:27.060', 2)
--GO
----====================================================================
--SELECT COUNT(*) FROM Employee
--SELECT Current_timestamp
--SELECT Rand(1)
--SELECT Rand
