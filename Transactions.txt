
----#######################Transaction Management######################### ---------------------

----Create Product table
--CREATE TABLE Product
--(
-- ProductID INT PRIMARY KEY, 
-- Name VARCHAR(40), 
-- Price INT,
-- Quantity INT
-- )
-- GO

-- -- Populate Product Table with test data
-- INSERT INTO Product VALUES(101, 'Product-1', 100, 10)
-- INSERT INTO Product VALUES(102, 'Product-2', 200, 15)
-- INSERT INTO Product VALUES(103, 'Product-3', 300, 20)
-- INSERT INTO Product VALUES(104, 'Product-4', 400, 25)

-- --======================================================================

-- BEGIN TRANSACTION
-- INSERT INTO Product VALUES(105,'Product-5',500, 30)
-- UPDATE Product SET Price =350 WHERE ProductID = 103
-- DELETE FROM Product WHERE ProductID = 103
--COMMIT TRANSACTION

----========================================================================
--BEGIN TRANSACTION
--INSERT INTO Product VALUES(106,'Product-6',600, 30)
--UPDATE Product SET Price =550 WHERE ProductID = 105
--DELETE FROM Product WHERE ProductID = 104
----=========================================================================
--ROLLBACK TRANSACTION
----=========================================================================
--BEGIN TRANSACTION
--INSERT INTO Product VALUES(110,'Product-10',600, 30)
--INSERT INTO Product VALUES(110,'Product-10',600, 30)

--IF(@@ERROR > 0)
--BEGIN
--    Rollback Transaction
--END
--ELSE
--BEGIN
--   Commit Transaction
--END
----===========================================================================
----###############################Types of Transactions##############################----------------

--CREATE TABLE Customer
--(
--    CustomerID INT PRIMARY KEY,
--    CustomerCode VARCHAR(10),
--    CustomerName VARCHAR(50)
--)

--INSERT INTO Customer VALUES (1, 'CODE_1', 'David')

--INSERT INTO Customer VALUES (1, 'CODE_2', 'John')
----=================================================================

--DELETE FROM Customer;

--SET IMPLICIT_TRANSACTIONS ON

--INSERT INTO Customer VALUES (1, 'CODE_1', 'David')

--INSERT INTO Customer VALUES (2, 'CODE_2', 'John')

--COMMIT TRANSACTION
--select * from customer;
----=================================================================

--INSERT INTO Customer VALUES (3, 'CODE_3', 'Pam');
--UPDATE Customer SET CustomerName = 'John Changed' WHERE CustomerID = 2;
--SELECT * FROM Customer;

--ROLLBACK TRANSACTION

----====================================================================
--select * from customer;

--SET IMPLICIT_TRANSACTIONS OFF

----====================================================================
--CREATE PROC SPAddCustommer
--AS
--BEGIN
--   BEGIN TRANSACTION
--      INSERT INTO Customer VALUES(3, 'CODE_3', 'Pam')
--      INSERT INTO Customer VALUES(4, 'CODE_4', 'Sara')
--      IF(@@ERROR > 0)
--      BEGIN
--         ROLLBACK TRANSACTION
--      END
--      ELSE
--      BEGIN
--         COMMIT TRANSACTION
--      END  
--END
----=====================================================================
----##############################Nested Transactions############################--

--BEGIN TRANSACTION T1
--      INSERT INTO Customer VALUES (10, 'Code_10', 'Ramesh')
--      INSERT INTO Customer VALUES (11, 'Code_11', 'Suresh')

--      BEGIN TRANSACTION T2
--            INSERT INTO Customer VALUES (12, 'Code_12', 'Priyanka')
--            INSERT INTO Customer VALUES (13, 'Code_13', 'Preety')   
--            PRINT @@TRANCOUNT  -- Here TRANCOUNT value 2

--      COMMIT TRANSACTION T2 -- This does not physically commit
--      PRINT @@TRANCOUNT -- Here TRANCOUNT value 1

--COMMIT TRANSACTION T1 -- This does a physically commit
--PRINT @@TRANCOUNT -- Here TRANCOUNT value 0

----======================================================================
--ROLLBACK TRANSACTION SavePoint1

--ROLLBACK TRANSACTION SavePoint2

--ROLLBACK TRANSACTION SavePoint3

--DELETE FROM Customer;
----=======================================================================

--BEGIN TRANSACTION 

-- SAVE TRANSACTION SavePoint1
--     INSERT INTO Customer VALUES (1, 'Code_1', 'Ramesh')
--     INSERT INTO Customer VALUES (2, 'Code_2', 'Suresh')

-- SAVE TRANSACTION SavePoint2
--     INSERT INTO Customer VALUES (3, 'Code_3', 'Priyanka')
--     INSERT INTO Customer VALUES (4, 'Code_4', 'Preety')

-- SAVE TRANSACTION SavePoint3
--     INSERT INTO Customer VALUES (5, 'Code_5', 'John')
--     INSERT INTO Customer VALUES (6, 'Code_6', 'David')
----==========================================================================
--Rollback Transaction SavePoint2;

--Commit Transaction;

--DELETE FROM Customer;

--BEGIN TRANSACTION T1
--    SAVE TRANSACTION SavePoint1
--         INSERT INTO Customer VALUES (10, 'Code_10', 'Ramesh')
--         INSERT INTO Customer VALUES (11, 'Code_11', 'Suresh')
 
--     BEGIN TRANSACTION T2
--          SAVE TRANSACTION SavePoint2
--               INSERT INTO Customer VALUES (12, 'Code_12', 'Priyanka')
--               INSERT INTO Customer VALUES (13, 'Code_13', 'Preety')   

--     COMMIT TRANSACTION T2 
--     ROLLBACK TRANSACTION SavePoint2

--COMMIT TRANSACTION T1 
----==========================================================================
--DELETE FROM Customer;

--BEGIN TRANSACTION 

-- SAVE TRANSACTION SavePoint1
--     INSERT INTO Customer VALUES (1, 'Code_1', 'Ramesh')
--     INSERT INTO Customer VALUES (2, 'Code_2', 'Suresh')

-- SAVE TRANSACTION SavePoint1
--     INSERT INTO Customer VALUES (3, 'Code_3', 'Priyanka')
--     INSERT INTO Customer VALUES (4, 'Code_4', 'Preety')

-- SAVE TRANSACTION SavePoint3
--     INSERT INTO Customer VALUES (5, 'Code_5', 'John')
--     INSERT INTO Customer VALUES (6, 'Code_6', 'David')

--     ROLLBACK TRANSACTION SavePoint1

--COMMIT TRANSACTION 

----=============================================================================

----############################ACID Properties##################################--

---- Create the Product Table
--CREATE TABLE Product
--(
--  ProductID INT PRIMARY KEY, 
--  Name VARCHAR(40), 
--  Price INT,
--  Quantity INT
-- )
-- GO

-- -- Populate the Product Table with some test data
-- INSERT INTO Product VALUES(101, 'Laptop', 15000, 100)
-- INSERT INTO Product VALUES(102, 'Desktop', 20000, 150)
-- INSERT INTO Product VALUES(103, 'Mobile', 3000, 200)
-- INSERT INTO Product VALUES(104, 'Tablet', 4000, 250)

-- -- Create the ProductSales table
--CREATE TABLE ProductSales
--(
--  ProductSalesId INT PRIMARY KEY,
--  ProductId INT,
--  QuantitySold INT
--) 
--GO

---- Populate the ProductSales table with some test data
--INSERT INTO ProductSales VALUES(1, 101, 10)
--INSERT INTO ProductSales VALUES(2, 102, 15)
--INSERT INTO ProductSales VALUES(3, 103, 30)
--INSERT INTO ProductSales VALUES(4, 104, 35)
--GO

----=======================================================================================

---- Atomocity-----

--CREATE PROCEDURE spSellProduct
--@ProductID INT,
--@QuantityToSell INT
--AS
--BEGIN
--  -- First we need to check the stock available for the product we want to sell
--  DECLARE @StockAvailable INT

--  SELECT @StockAvailable = Quantity
--  FROM Product 
--  WHERE ProductId = @ProductId

--  -- We need to throw an error to the calling application 
--  -- if the stock is less than the quantity we want to sell
--  IF(@StockAvailable< @QuantityToSell)
--  BEGIN
--    Raiserror('Enough Stock is not available',16,1)
--  END
--  -- If enough stock is available
--  ELSE
--  BEGIN
--    BEGIN TRY
--      -- We need to start the transaction
--      BEGIN TRANSACTION

--      -- First we need to reduce the quantity available
--      UPDATE Product SET 
--          Quantity = (Quantity - @QuantityToSell)
--      WHERE ProductID = @ProductID

--      -- Calculate MAX ProductSalesId
--      DECLARE @MaxProductSalesId INT
--      SELECT @MaxProductSalesId = CASE 
--          WHEN MAX(ProductSalesId) IS NULL THEN 0 
--          ELSE MAX(ProductSalesId) 
--          END 
--      FROM ProductSales

--      -- Increment @MaxProductSalesId by 1, so we don't get a primary key violation
--      Set @MaxProductSalesId = @MaxProductSalesId + 1

--      -- We need to insert the quantity sold into the ProductSales table
--      INSERT INTO ProductSales(ProductSalesId, ProductId, QuantitySold)
--      VALUES(@MaxProductSalesId, @ProductId, @QuantityToSell)

--      -- Finally Commit the transaction
--      COMMIT TRANSACTION
--    END TRY
--    BEGIN CATCH
--      ROLLBACK TRANSACTION
--    END CATCH
--  End
--END

----=========================================================================== 